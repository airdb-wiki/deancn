<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo Book</title><link>https://airdb.wiki/deancn/</link><description>Recent content on Hugo Book</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://airdb.wiki/deancn/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://airdb.wiki/deancn/wiki/osinit/mac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/osinit/mac/</guid><description> Mac 初始化 # Homebrew 安装 # https://docs.brew.sh/Installation
/bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&amp;#34; 安装常用软件 # brew install wget brew install nodejs brew install tree brew install jq brew install hugo brew install gh brew install golangci-lint # readlink brew install coreutils</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/osinit/ubuntu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/osinit/ubuntu/</guid><description> Ubuntu 初始化 #</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/dev/coding-style/document/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/dev/coding-style/document/</guid><description>中文文案排版指北 # 统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。
目录 # 空格 中英文之间需要增加空格 中文与数字之间需要增加空格 数字与单位之间需要增加空格 全角标点与其他字符之间不加空格 -ms-text-autospace to the rescue? 标点符号 不重复使用标点符号 全角和半角 使用全角中文标点 数字使用半角字符 遇到完整的英文整句、特殊名词，其內容使用半角标点 名词 专有名词使用正确的大小写 不要使用不地道的缩写 争议 链接之间增加空格 简体中文使用直角引号 工具 谁在这样做？ 参考文献 空格 # 「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。
与大家共勉之。」—— vinta/paranoid-auto-spacing
中英文之间需要增加空格 # 正确：
在 LeanCloud 上，数据存储是围绕 AVObject 进行的。
错误：
在LeanCloud上，数据存储是围绕AVObject进行的。
在 LeanCloud上，数据存储是围绕AVObject 进行的。
完整的正确用法：
在 LeanCloud 上，数据存储是围绕 AVObject 进行的。每个 AVObject 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 AVObject 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。
例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。
中文与数字之间需要增加空格 # 正确：</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/dev/coding-style/go-coding-style/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/dev/coding-style/go-coding-style/</guid><description>Golang 编码规范指南 # 关于代码规范，每个公司、甚至每个团队都有不同的规范，并且有不同的理解。
这份编码规范是参考别的规范，结合自己的实际情况而修订的，并尝试着让身边的朋友也遵守这个。 核心的目的还是为了便于广阅读，减少可避免的 bug 和安全隐患。
如果你的代码没有办法找到下面的规范，那么就遵循标准库的规范，多阅读标准库的源码，标准库的代码可以说是写代码参考的标杆。
行长约定 # 一行最长不超过 80 个字符，超过的请使用换行展示，尽量保持格式优雅。 如果使用 vim，请确认 ~/.vimrc 中设置有 set textwidth=80
网络在线, 频次随机(由讲师时间决定)
package 名字 # 保持 package 的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，尽量和标准库不要冲突。
import 规范 # import 在多行的情况下，goimports 会自动帮你格式化，但是我们这里还是规范一下import的一些规范，如果你在一个文件里面引入了一个package，还是建议采用如下格式：
import ( &amp;quot;fmt&amp;quot; ) 如果你的包引入了三种类型的包，标准库包，程序内部包，第三方包，建议采用如下方式进行组织你的包：
import ( &amp;quot;encoding/json&amp;quot; &amp;quot;strings&amp;quot; &amp;quot;github.com/astaxie/beego&amp;quot; &amp;quot;github.com/go-sql-driver/mysql&amp;quot; &amp;quot;myproject/models&amp;quot; &amp;quot;myproject/controller&amp;quot; &amp;quot;myproject/utils&amp;quot; ) 有顺序的引入包，不同的类型采用空格分离，第一种实标准库，第二是第三方包, 第三是项目包。
在项目中不要使用相对路径引入包：
import &amp;quot;../net&amp;quot; // 这是不好的导入 import &amp;quot;github.com/name/repo/net&amp;quot; // 这是正确的做法 变量申明 # 变量名采用驼峰标准，不要使用 _ 来命名变量名，多个变量申明放在一起
在函数外部申明必须使用 var,不要采用 :=，容易踩到变量的作用域的问题。
自定义类型的string循环问题 # 如果自定义的类型定义了 String 方法，那么在打印的时候会产生隐藏的一些 bug</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/dev/emoji-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/dev/emoji-list/</guid><description> emoji-list # emoji表情列表
目录 # 人物 自然 事物 地点 符号 人物 # :bowtie: :bowtie: :smile: :smile: :laughing: :laughing: :blush: :blush: :smiley: :smiley: :relaxed: :relaxed: :smirk: :smirk: :heart_eyes: :heart_eyes: :kissing_heart: :kissing_heart: :kissing_closed_eyes: :kissing_closed_eyes: :flushed: :flushed: :relieved: :relieved: :satisfied: :satisfied: :grin: :grin: :wink: :wink: :stuck_out_tongue_winking_eye: :stuck_out_tongue_winking_eye: :stuck_out_tongue_closed_eyes: :stuck_out_tongue_closed_eyes: :grinning: :grinning: :kissing: :kissing: :kissing_smiling_eyes: :kissing_smiling_eyes: :stuck_out_tongue: :stuck_out_tongue: :sleeping: :sleeping: :worried: :worried: :frowning: :frowning: :anguished: :anguished: :open_mouth: :open_mouth: :grimacing: :grimacing: :confused: :confused: :hushed: :hushed: :expressionless: :expressionless: :unamused: :unamused: :sweat_smile: :sweat_smile: :sweat: :sweat: :disappointed_relieved: :disappointed_relieved: :weary: :weary: :pensive: :pensive: :disappointed: :disappointed: :confounded: :confounded: :fearful: :fearful: :cold_sweat: :cold_sweat: :persevere: :persevere: :cry: :cry: :sob: :sob: :joy: :joy: :astonished: :astonished: :scream: :scream: :neckbeard: :neckbeard: :tired_face: :tired_face: :angry: :angry: :rage: :rage: :triumph: :triumph: :sleepy: :sleepy: :yum: :yum: :mask: :mask: :sunglasses: :sunglasses: :dizzy_face: :dizzy_face: :imp: :imp: :smiling_imp: :smiling_imp: :neutral_face: :neutral_face: :no_mouth: :no_mouth: :innocent: :innocent: :alien: :alien: :yellow_heart: :yellow_heart: :blue_heart: :blue_heart: :purple_heart: :purple_heart: :heart: :heart: :green_heart: :green_heart: :broken_heart: :broken_heart: :heartbeat: :heartbeat: :heartpulse: :heartpulse: :two_hearts: :two_hearts: :revolving_hearts: :revolving_hearts: :cupid: :cupid: :sparkling_heart: :sparkling_heart: :sparkles: :sparkles: :star: :star: :star2: :star2: :dizzy: :dizzy: :boom: :boom: :collision: :collision: :anger: :anger: :exclamation: :exclamation: :question: :question: :grey_exclamation: :grey_exclamation: :grey_question: :grey_question: :zzz: :zzz: :dash: :dash: :sweat_drops: :sweat_drops: :notes: :notes: :musical_note: :musical_note: :fire: :fire: :hankey: :hankey: :poop: :poop: :shit: :shit: :+1: :+1: :thumbsup: :thumbsup: :-1: :-1: :thumbsdown: :thumbsdown: :ok_hand: :ok_hand: :punch: :punch: :facepunch: :facepunch: :fist: :fist: :v: :v: :wave: :wave: :hand: :hand: :raised_hand: :raised_hand: :open_hands: :open_hands: :point_up: :point_up: :point_down: :point_down: :point_left: :point_left: :point_right: :point_right: :raised_hands: :raised_hands: :pray: :pray: :point_up_2: :point_up_2: :clap: :clap: :muscle: :muscle: :metal: :metal: :fu: :fu: :walking: :walking: :runner: :runner: :running: :running: :couple: :couple: :family: :family: :two_men_holding_hands: :two_men_holding_hands: :two_women_holding_hands: :two_women_holding_hands: :dancer: :dancer: :dancers: :dancers: :ok_woman: :ok_woman: :no_good: :no_good: :information_desk_person: :information_desk_person: :raising_hand: :raising_hand: :bride_with_veil: :bride_with_veil: :person_with_pouting_face: :person_with_pouting_face: :person_frowning: :person_frowning: :bow: :bow: :couplekiss: :couplekiss: :couple_with_heart: :couple_with_heart: :massage: :massage: :haircut: :haircut: :nail_care: :nail_care: :boy: :boy: :girl: :girl: :woman: :woman: :man: :man: :baby: :baby: :older_woman: :older_woman: :older_man: :older_man: :person_with_blond_hair: :person_with_blond_hair: :man_with_gua_pi_mao: :man_with_gua_pi_mao: :man_with_turban: :man_with_turban: :construction_worker: :construction_worker: :cop: :cop: :angel: :angel: :princess: :princess: :smiley_cat: :smiley_cat: :smile_cat: :smile_cat: :heart_eyes_cat: :heart_eyes_cat: :kissing_cat: :kissing_cat: :smirk_cat: :smirk_cat: :scream_cat: :scream_cat: :crying_cat_face: :crying_cat_face: :joy_cat: :joy_cat: :pouting_cat: :pouting_cat: :japanese_ogre: :japanese_ogre: :japanese_goblin: :japanese_goblin: :see_no_evil: :see_no_evil: :hear_no_evil: :hear_no_evil: :speak_no_evil: :speak_no_evil: :guardsman: :guardsman: :skull: :skull: :feet: :feet: :lips: :lips: :kiss: :kiss: :droplet: :droplet: :ear: :ear: :eyes: :eyes: :nose: :nose: :tongue: :tongue: :love_letter: :love_letter: :bust_in_silhouette: :bust_in_silhouette: :busts_in_silhouette: :busts_in_silhouette: :speech_balloon: :speech_balloon: :thought_balloon: :thought_balloon: :feelsgood: :feelsgood: :finnadie: :finnadie: :goberserk: :goberserk: :godmode: :godmode: :hurtrealbad: :hurtrealbad: :rage1: :rage1: :rage2: :rage2: :rage3: :rage3: :rage4: :rage4: :suspect: :suspect: :trollface: :trollface: 自然 # :sunny: :sunny: :umbrella: :umbrella: :cloud: :cloud: :snowflake: :snowflake: :snowman: :snowman: :zap: :zap: :cyclone: :cyclone: :foggy: :foggy: :ocean: :ocean: :cat: :cat: :dog: :dog: :mouse: :mouse: :hamster: :hamster: :rabbit: :rabbit: :wolf: :wolf: :frog: :frog: :tiger: :tiger: :koala: :koala: :bear: :bear: :pig: :pig: :pig_nose: :pig_nose: :cow: :cow: :boar: :boar: :monkey_face: :monkey_face: :monkey: :monkey: :horse: :horse: :racehorse: :racehorse: :camel: :camel: :sheep: :sheep: :elephant: :elephant: :panda_face: :panda_face: :snake: :snake: :bird: :bird: :baby_chick: :baby_chick: :hatched_chick: :hatched_chick: :hatching_chick: :hatching_chick: :chicken: :chicken: :penguin: :penguin: :turtle: :turtle: :bug: :bug: :honeybee: :honeybee: :ant: :ant: :beetle: :beetle: :snail: :snail: :octopus: :octopus: :tropical_fish: :tropical_fish: :fish: :fish: :whale: :whale: :whale2: :whale2: :dolphin: :dolphin: :cow2: :cow2: :ram: :ram: :rat: :rat: :water_buffalo: :water_buffalo: :tiger2: :tiger2: :rabbit2: :rabbit2: :dragon: :dragon: :goat: :goat: :rooster: :rooster: :dog2: :dog2: :pig2: :pig2: :mouse2: :mouse2: :ox: :ox: :dragon_face: :dragon_face: :blowfish: :blowfish: :crocodile: :crocodile: :dromedary_camel: :dromedary_camel: :leopard: :leopard: :cat2: :cat2: :poodle: :poodle: :paw_prints: :paw_prints: :bouquet: :bouquet: :cherry_blossom: :cherry_blossom: :tulip: :tulip: :four_leaf_clover: :four_leaf_clover: :rose: :rose: :sunflower: :sunflower: :hibiscus: :hibiscus: :maple_leaf: :maple_leaf: :leaves: :leaves: :fallen_leaf: :fallen_leaf: :herb: :herb: :mushroom: :mushroom: :cactus: :cactus: :palm_tree: :palm_tree: :evergreen_tree: :evergreen_tree: :deciduous_tree: :deciduous_tree: :chestnut: :chestnut: :seedling: :seedling: :blossom: :blossom: :ear_of_rice: :ear_of_rice: :shell: :shell: :globe_with_meridians: :globe_with_meridians: :sun_with_face: :sun_with_face: :full_moon_with_face: :full_moon_with_face: :new_moon_with_face: :new_moon_with_face: :new_moon: :new_moon: :waxing_crescent_moon: :waxing_crescent_moon: :first_quarter_moon: :first_quarter_moon: :waxing_gibbous_moon: :waxing_gibbous_moon: :full_moon: :full_moon: :waning_gibbous_moon: :waning_gibbous_moon: :last_quarter_moon: :last_quarter_moon: :waning_crescent_moon: :waning_crescent_moon: :last_quarter_moon_with_face: :last_quarter_moon_with_face: :first_quarter_moon_with_face: :first_quarter_moon_with_face: :moon: :moon: :earth_africa: :earth_africa: :earth_americas: :earth_americas: :earth_asia: :earth_asia: :volcano: :volcano: :milky_way: :milky_way: :partly_sunny: :partly_sunny: :octocat: :octocat: :squirrel: :squirrel: 事物 # :bamboo: :bamboo: :gift_heart: :gift_heart: :dolls: :dolls: :school_satchel: :school_satchel: :mortar_board: :mortar_board: :flags: :flags: :fireworks: :fireworks: :sparkler: :sparkler: :wind_chime: :wind_chime: :rice_scene: :rice_scene: :jack_o_lantern: :jack_o_lantern: :ghost: :ghost: :santa: :santa: :christmas_tree: :christmas_tree: :gift: :gift: :bell: :bell: :no_bell: :no_bell: :tanabata_tree: :tanabata_tree: :tada: :tada: :confetti_ball: :confetti_ball: :balloon: :balloon: :crystal_ball: :crystal_ball: :cd: :cd: :dvd: :dvd: :floppy_disk: :floppy_disk: :camera: :camera: :video_camera: :video_camera: :movie_camera: :movie_camera: :computer: :computer: :tv: :tv: :iphone: :iphone: :phone: :phone: :telephone: :telephone: :telephone_receiver: :telephone_receiver: :pager: :pager: :fax: :fax: :minidisc: :minidisc: :vhs: :vhs: :sound: :sound: :speaker: :speaker: :mute: :mute: :loudspeaker: :loudspeaker: :mega: :mega: :hourglass: :hourglass: :hourglass_flowing_sand: :hourglass_flowing_sand: :alarm_clock: :alarm_clock: :watch: :watch: :radio: :radio: :satellite: :satellite: :loop: :loop: :mag: :mag: :mag_right: :mag_right: :unlock: :unlock: :lock: :lock: :lock_with_ink_pen: :lock_with_ink_pen: :closed_lock_with_key: :closed_lock_with_key: :key: :key: :bulb: :bulb: :flashlight: :flashlight: :high_brightness: :high_brightness: :low_brightness: :low_brightness: :electric_plug: :electric_plug: :battery: :battery: :calling: :calling: :email: :email: :mailbox: :mailbox: :postbox: :postbox: :bath: :bath: :bathtub: :bathtub: :shower: :shower: :toilet: :toilet: :wrench: :wrench: :nut_and_bolt: :nut_and_bolt: :hammer: :hammer: :seat: :seat: :moneybag: :moneybag: :yen: :yen: :dollar: :dollar: :pound: :pound: :euro: :euro: :credit_card: :credit_card: :money_with_wings: :money_with_wings: :e-mail: :e-mail: :inbox_tray: :inbox_tray: :outbox_tray: :outbox_tray: :envelope: :envelope: :incoming_envelope: :incoming_envelope: :postal_horn: :postal_horn: :mailbox_closed: :mailbox_closed: :mailbox_with_mail: :mailbox_with_mail: :mailbox_with_no_mail: :mailbox_with_no_mail: :door: :door: :smoking: :smoking: :bomb: :bomb: :gun: :gun: :hocho: :hocho: :pill: :pill: :syringe: :syringe: :page_facing_up: :page_facing_up: :page_with_curl: :page_with_curl: :bookmark_tabs: :bookmark_tabs: :bar_chart: :bar_chart: :chart_with_upwards_trend: :chart_with_upwards_trend: :chart_with_downwards_trend: :chart_with_downwards_trend: :scroll: :scroll: :clipboard: :clipboard: :calendar: :calendar: :date: :date: :card_index: :card_index: :file_folder: :file_folder: :open_file_folder: :open_file_folder: :scissors: :scissors: :pushpin: :pushpin: :paperclip: :paperclip: :black_nib: :black_nib: :pencil2: :pencil2: :straight_ruler: :straight_ruler: :triangular_ruler: :triangular_ruler: :closed_book: :closed_book: :green_book: :green_book: :blue_book: :blue_book: :orange_book: :orange_book: :notebook: :notebook: :notebook_with_decorative_cover: :notebook_with_decorative_cover: :ledger: :ledger: :books: :books: :bookmark: :bookmark: :name_badge: :name_badge: :microscope: :microscope: :telescope: :telescope: :newspaper: :newspaper: :football: :football: :basketball: :basketball: :soccer: :soccer: :baseball: :baseball: :tennis: :tennis: :8ball: :8ball: :rugby_football: :rugby_football: :bowling: :bowling: :golf: :golf: :mountain_bicyclist: :mountain_bicyclist: :bicyclist: :bicyclist: :horse_racing: :horse_racing: :snowboarder: :snowboarder: :swimmer: :swimmer: :surfer: :surfer: :ski: :ski: :spades: :spades: :hearts: :hearts: :clubs: :clubs: :diamonds: :diamonds: :gem: :gem: :ring: :ring: :trophy: :trophy: :musical_score: :musical_score: :musical_keyboard: :musical_keyboard: :violin: :violin: :space_invader: :space_invader: :video_game: :video_game: :black_joker: :black_joker: :flower_playing_cards: :flower_playing_cards: :game_die: :game_die: :dart: :dart: :mahjong: :mahjong: :clapper: :clapper: :memo: :memo: :pencil: :pencil: :book: :book: :art: :art: :microphone: :microphone: :headphones: :headphones: :trumpet: :trumpet: :saxophone: :saxophone: :guitar: :guitar: :shoe: :shoe: :sandal: :sandal: :high_heel: :high_heel: :lipstick: :lipstick: :boot: :boot: :shirt: :shirt: :tshirt: :tshirt: :necktie: :necktie: :womans_clothes: :womans_clothes: :dress: :dress: :running_shirt_with_sash: :running_shirt_with_sash: :jeans: :jeans: :kimono: :kimono: :bikini: :bikini: :ribbon: :ribbon: :tophat: :tophat: :crown: :crown: :womans_hat: :womans_hat: :mans_shoe: :mans_shoe: :closed_umbrella: :closed_umbrella: :briefcase: :briefcase: :handbag: :handbag: :pouch: :pouch: :purse: :purse: :eyeglasses: :eyeglasses: :fishing_pole_and_fish: :fishing_pole_and_fish: :coffee: :coffee: :tea: :tea: :sake: :sake: :baby_bottle: :baby_bottle: :beer: :beer: :beers: :beers: :cocktail: :cocktail: :tropical_drink: :tropical_drink: :wine_glass: :wine_glass: :fork_and_knife: :fork_and_knife: :pizza: :pizza: :hamburger: :hamburger: :fries: :fries: :poultry_leg: :poultry_leg: :meat_on_bone: :meat_on_bone: :spaghetti: :spaghetti: :curry: :curry: :fried_shrimp: :fried_shrimp: :bento: :bento: :sushi: :sushi: :fish_cake: :fish_cake: :rice_ball: :rice_ball: :rice_cracker: :rice_cracker: :rice: :rice: :ramen: :ramen: :stew: :stew: :oden: :oden: :dango: :dango: :egg: :egg: :bread: :bread: :doughnut: :doughnut: :custard: :custard: :icecream: :icecream: :ice_cream: :ice_cream: :shaved_ice: :shaved_ice: :birthday: :birthday: :cake: :cake: :cookie: :cookie: :chocolate_bar: :chocolate_bar: :candy: :candy: :lollipop: :lollipop: :honey_pot: :honey_pot: :apple: :apple: :green_apple: :green_apple: :tangerine: :tangerine: :lemon: :lemon: :cherries: :cherries: :grapes: :grapes: :watermelon: :watermelon: :strawberry: :strawberry: :peach: :peach: :melon: :melon: :banana: :banana: :pear: :pear: :pineapple: :pineapple: :sweet_potato: :sweet_potato: :eggplant: :eggplant: :tomato: :tomato: :corn: :corn: 地点 # :house: :house: :house_with_garden: :house_with_garden: :school: :school: :office: :office: :post_office: :post_office: :hospital: :hospital: :bank: :bank: :convenience_store: :convenience_store: :love_hotel: :love_hotel: :hotel: :hotel: :wedding: :wedding: :church: :church: :department_store: :department_store: :european_post_office: :european_post_office: :city_sunrise: :city_sunrise: :city_sunset: :city_sunset: :japanese_castle: :japanese_castle: :european_castle: :european_castle: :tent: :tent: :factory: :factory: :tokyo_tower: :tokyo_tower: :japan: :japan: :mount_fuji: :mount_fuji: :sunrise_over_mountains: :sunrise_over_mountains: :sunrise: :sunrise: :stars: :stars: :statue_of_liberty: :statue_of_liberty: :bridge_at_night: :bridge_at_night: :carousel_horse: :carousel_horse: :rainbow: :rainbow: :ferris_wheel: :ferris_wheel: :fountain: :fountain: :roller_coaster: :roller_coaster: :ship: :ship: :speedboat: :speedboat: :boat: :boat: :sailboat: :sailboat: :rowboat: :rowboat: :anchor: :anchor: :rocket: :rocket: :airplane: :airplane: :helicopter: :helicopter: :steam_locomotive: :steam_locomotive: :tram: :tram: :mountain_railway: :mountain_railway: :bike: :bike: :aerial_tramway: :aerial_tramway: :suspension_railway: :suspension_railway: :mountain_cableway: :mountain_cableway: :tractor: :tractor: :blue_car: :blue_car: :oncoming_automobile: :oncoming_automobile: :car: :car: :red_car: :red_car: :taxi: :taxi: :oncoming_taxi: :oncoming_taxi: :articulated_lorry: :articulated_lorry: :bus: :bus: :oncoming_bus: :oncoming_bus: :rotating_light: :rotating_light: :police_car: :police_car: :oncoming_police_car: :oncoming_police_car: :fire_engine: :fire_engine: :ambulance: :ambulance: :minibus: :minibus: :truck: :truck: :train: :train: :station: :station: :train2: :train2: :bullettrain_front: :bullettrain_front: :bullettrain_side: :bullettrain_side: :light_rail: :light_rail: :monorail: :monorail: :railway_car: :railway_car: :trolleybus: :trolleybus: :ticket: :ticket: :fuelpump: :fuelpump: :vertical_traffic_light: :vertical_traffic_light: :traffic_light: :traffic_light: :warning: :warning: :construction: :construction: :beginner: :beginner: :atm: :atm: :slot_machine: :slot_machine: :busstop: :busstop: :barber: :barber: :hotsprings: :hotsprings: :checkered_flag: :checkered_flag: :crossed_flags: :crossed_flags: :izakaya_lantern: :izakaya_lantern: :moyai: :moyai: :circus_tent: :circus_tent: :performing_arts: :performing_arts: :round_pushpin: :round_pushpin: :triangular_flag_on_post: :triangular_flag_on_post: :jp: :jp: :kr: :kr: :cn: :cn: :us: :us: :fr: :fr: :es: :es: :it: :it: :ru: :ru: :gb: :gb: :uk: :uk: :de: :de: 符号 # :one: :one: :two: :two: :three: :three: :four: :four: :five: :five: :six: :six: :seven: :seven: :eight: :eight: :nine: :nine: :keycap_ten: :keycap_ten: :1234: :1234: :zero: :zero: :hash: :hash: :symbols: :symbols: :arrow_backward: :arrow_backward: :arrow_down: :arrow_down: :arrow_forward: :arrow_forward: :arrow_left: :arrow_left: :capital_abcd: :capital_abcd: :abcd: :abcd: :abc: :abc: :arrow_lower_left: :arrow_lower_left: :arrow_lower_right: :arrow_lower_right: :arrow_right: :arrow_right: :arrow_up: :arrow_up: :arrow_upper_left: :arrow_upper_left: :arrow_upper_right: :arrow_upper_right: :arrow_double_down: :arrow_double_down: :arrow_double_up: :arrow_double_up: :arrow_down_small: :arrow_down_small: :arrow_heading_down: :arrow_heading_down: :arrow_heading_up: :arrow_heading_up: :leftwards_arrow_with_hook: :leftwards_arrow_with_hook: :arrow_right_hook: :arrow_right_hook: :left_right_arrow: :left_right_arrow: :arrow_up_down: :arrow_up_down: :arrow_up_small: :arrow_up_small: :arrows_clockwise: :arrows_clockwise: :arrows_counterclockwise: :arrows_counterclockwise: :rewind: :rewind: :fast_forward: :fast_forward: :information_source: :information_source: :ok: :ok: :twisted_rightwards_arrows: :twisted_rightwards_arrows: :repeat: :repeat: :repeat_one: :repeat_one: :new: :new: :top: :top: :up: :up: :cool: :cool: :free: :free: :ng: :ng: :cinema: :cinema: :koko: :koko: :signal_strength: :signal_strength: :u5272: :u5272: :u5408: :u5408: :u55b6: :u55b6: :u6307: :u6307: :u6708: :u6708: :u6709: :u6709: :u6e80: :u6e80: :u7121: :u7121: :u7533: :u7533: :u7a7a: :u7a7a: :u7981: :u7981: :sa: :sa: :restroom: :restroom: :mens: :mens: :womens: :womens: :baby_symbol: :baby_symbol: :no_smoking: :no_smoking: :parking: :parking: :wheelchair: :wheelchair: :metro: :metro: :baggage_claim: :baggage_claim: :accept: :accept: :wc: :wc: :potable_water: :potable_water: :put_litter_in_its_place: :put_litter_in_its_place: :secret: :secret: :congratulations: :congratulations: :m: :m: :passport_control: :passport_control: :left_luggage: :left_luggage: :customs: :customs: :ideograph_advantage: :ideograph_advantage: :cl: :cl: :sos: :sos: :id: :id: :no_entry_sign: :no_entry_sign: :underage: :underage: :no_mobile_phones: :no_mobile_phones: :do_not_litter: :do_not_litter: :non-potable_water: :non-potable_water: :no_bicycles: :no_bicycles: :no_pedestrians: :no_pedestrians: :children_crossing: :children_crossing: :no_entry: :no_entry: :eight_spoked_asterisk: :eight_spoked_asterisk: :eight_pointed_black_star: :eight_pointed_black_star: :heart_decoration: :heart_decoration: :vs: :vs: :vibration_mode: :vibration_mode: :mobile_phone_off: :mobile_phone_off: :chart: :chart: :currency_exchange: :currency_exchange: :aries: :aries: :taurus: :taurus: :gemini: :gemini: :cancer: :cancer: :leo: :leo: :virgo: :virgo: :libra: :libra: :scorpius: :scorpius: :sagittarius: :sagittarius: :capricorn: :capricorn: :aquarius: :aquarius: :pisces: :pisces: :ophiuchus: :ophiuchus: :six_pointed_star: :six_pointed_star: :negative_squared_cross_mark: :negative_squared_cross_mark: :a: :a: :b: :b: :ab: :ab: :o2: :o2: :diamond_shape_with_a_dot_inside: :diamond_shape_with_a_dot_inside: :recycle: :recycle: :end: :end: :on: :on: :soon: :soon: :clock1: :clock1: :clock130: :clock130: :clock10: :clock10: :clock1030: :clock1030: :clock11: :clock11: :clock1130: :clock1130: :clock12: :clock12: :clock1230: :clock1230: :clock2: :clock2: :clock230: :clock230: :clock3: :clock3: :clock330: :clock330: :clock4: :clock4: :clock430: :clock430: :clock5: :clock5: :clock530: :clock530: :clock6: :clock6: :clock630: :clock630: :clock7: :clock7: :clock730: :clock730: :clock8: :clock8: :clock830: :clock830: :clock9: :clock9: :clock930: :clock930: :heavy_dollar_sign: :heavy_dollar_sign: :copyright: :copyright: :registered: :registered: :tm: :tm: :x: :x: :heavy_exclamation_mark: :heavy_exclamation_mark: :bangbang: :bangbang: :interrobang: :interrobang: :o: :o: :heavy_multiplication_x: :heavy_multiplication_x: :heavy_plus_sign: :heavy_plus_sign: :heavy_minus_sign: :heavy_minus_sign: :heavy_division_sign: :heavy_division_sign: :white_flower: :white_flower: :100: :100: :heavy_check_mark: :heavy_check_mark: :ballot_box_with_check: :ballot_box_with_check: :radio_button: :radio_button: :link: :link: :curly_loop: :curly_loop: :wavy_dash: :wavy_dash: :part_alternation_mark: :part_alternation_mark: :trident: :trident: :black_square: :black_square: :white_square: :white_square: :white_check_mark: :white_check_mark: :black_square_button: :black_square_button: :white_square_button: :white_square_button: :black_circle: :black_circle: :white_circle: :white_circle: :red_circle: :red_circle: :large_blue_circle: :large_blue_circle: :large_blue_diamond: :large_blue_diamond: :large_orange_diamond: :large_orange_diamond: :small_blue_diamond: :small_blue_diamond: :small_orange_diamond: :small_orange_diamond: :small_red_triangle: :small_red_triangle: :small_red_triangle_down: :small_red_triangle_down: :shipit: :shipit:</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/dev/github/actions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/dev/github/actions/</guid><description> Github Actions # Github Actions 是一套基于 github 的自动化执行框架，可以自定义各种 workflow 及工具来满足 CI, CD 相关的各种需求。
创建一个容器的 action # Github Demo: airdb actions
Refer: https://help.github.com/en/actions/creating-actions/creating-a-docker-container-action
主体思路：
通过执行 docker run 命令实现 actions 操作。
Workflow:
action.yml 中配置, 启用自定义的 action , 增加 input 变量作为 docker run 参数 调用自定义的 action , 从 env 中获取 GITHUB_EVENT_PATH, 读取 event.json 全部内容 代码中进行自定义操作 设置输出, 如 echo &amp;ldquo;::set-output name=time::$time&amp;rdquo;</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/dev/github/fork/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/dev/github/fork/</guid><description>Github 技巧 # Gitlab 或 Github Fork 后如何同步源的新更新内容？ # 给 fork 配置远程库 # 查看远程状态 git remote -v
确定一个将被同步给 fork 远程的上游仓库 git remote add upstream https://github.com/bfenetworks/bfe
再次查看状态确认是否配置成功。 git remote -v
同步 fork # 从上游仓库 fetch 分支和提交点，提交给本地 master，并会被存储在一个本地分支 upstream/master git fetch upstream 切换到本地主分支(如果不在的话) git checkout develop
把 upstream/master 分支合并到本地 master 上，这样就完成了同步，并且不会丢掉本地修改的内容。 git merge upstream/develop
如果想更新到 GitHub 的 fork 上，直接 git push origin develop</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/dev/github/git_branch_manage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/dev/github/git_branch_manage/</guid><description>Git 分支的约束和管理 # 来源： dxyoo7
一、分支说明 # master # 主分支，用作生产分支，里面的代码是准备部署到生产环境的。master 永远处于稳定状态，这个分支代码可以随时用来部署。 master 不提交代码，只合并代码。 合并代码到 master 的操作，由项目对应的集成管理员专人负责。 各分支要定期将 master 代码合并进来，避免后续分支合并到 master 时容易产生冲突，以减轻集成管理员的合并负担。 发版之后，要打 tag 。 develop # 从哪个分支分离开来：master 可以合并到哪个分支上：release Develop（开发）分支，包含了项目最新的功能和代码，所有开发都在 develop 上进行。一般情况下小的修改直接在这个分支上提交代码。
release # 从哪个分支分离开来：develop 必须要合并到哪个分支上：develop 与 master 分支的命名规范：release-* Release （发行）分支，是为发行正式的生产版本做准备。当开发的差不多了，准备发行就可以创建一个发行分支，在这个分支上可以做一些小的 bug 修复，准备发行的元数据，比如版本号，发行日期之类的。这时候，develop 分支可以继续接收新的提交，为下一个发行做准备。
feature # 从哪个分支分离开来：develop 必须要合并到哪个分支上：develop 分支的命名规范：除了 master，develop，release-，或者 hotfix- 以外的名字都可以 Feature（功能） 分支，有时候也叫 Topic 分支。在这种分支上去开发新的功能。当开发功能的时候，这个功能属于哪个目标发行还不知道。功能如果一直在开发，对应的这个功能分支就可以一直存在，不过到最后还是要合并到 develop 分支上，或者如果不想要开发的这个功能了，可以直接扔掉它。 Feature 分支一般只在开发者的 repo 里，而不是在 origin 上。
hotfix # 从哪个分支分离开来：master 必须要合并到哪个分支上：develop 与 master 分支的命名规范：hotfix-* 当在生产版本上遇到 bug，你需要立即修复的时候，可以创建一个 Hotfix 分支，这个分支可以基于生产环境使用的对应的在 master 分支上的 tag 来创建。</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/dev/github/how_to_github_pull_request/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/dev/github/how_to_github_pull_request/</guid><description>如何参与贡献: # Github 提交 PR, 地址: github.com/airdb/fun Github 提交 issues, 地址: github.com/airdb/fun/issues 写邮件给 info@airdb.com Github 如何提交 PR # step 1:
Fork GitHub 上的 Repository 到贡献者的 Repository
step 2:
clone 代码到本地 git clone github.com/airdb/fun
step 3:
检查当前 Git Repository
git remote -v origin https://github.com/airdb/fun (fetch) origin https://github.com/airdb/fun (push) step 4:
新建立贡献者 Git Repository 的连接
git remote add pullrequest https://github.com/deanchina/docs step 5:
新建工作分支
git checkout -b devel git branch * devel master step 6:</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/dev/github/issue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/dev/github/issue/</guid><description>Github Issue 的用法 # Reference
Issues 的属性 # GitHub 中每一个仓库都会有对应的一个issues的功能，issues 中可以新建多个 issue，每一个 issue 就像一篇文章，有标题和内容，还有评论。另外，每个issue都有唯一的编号 #n。 issue 可以设置: Opened 和 Closed 两种状态。
issue 还可以有额外的属性：
`Labels`，标签。包括 `bug`、`invalid` 等，可以自定义。表示 issue 的类型，解决的方式。 `Milestone`，里程碑。通常用来做版本管理，v0.1、v1.0 之类的，也可以是任意自定义字符串。一个里程碑对应的所有 issue 都被关闭后，这个里程碑会被自动认为已经达成。 `Assignee`，责任人。指定这个 issue 由谁负责来解决。 个人如何利用issues的功能？ # GitHub 的 issue 功能，对个人而言，就如同 TODO list。
可以把所有想要在下一步完成的工作，如feature 添加、bug 修复等，都写成一个个的 issue ，放在上面。既可以作为提醒，也可以统一管理。 另外，每一次 commit 都可以选择性的与某个 issue 关联。比如在 message 中添加 #n，就可以与第 n 个 issue 进行关联。 commit message title, #1 这个提交会作为一个 comment ，出现在编号为1的 issue 记录中。 如果添加：</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/dev/github/makefile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/dev/github/makefile/</guid><description>Makefile # Command line arguments # myos = $(word 1, $@) ifndef $myos myos = &amp;#34;$(shell uname | tr A-Z a-z)&amp;#34; endif Examples # Go Makefile # -include .env VERSION := $(shell git describe --tags) BUILD := $(shell git rev-parse --short HEAD) PROJECTNAME := $(shell basename &amp;#34;$(PWD)&amp;#34;) # Go related variables. GOBASE := $(shell pwd) GOPATH := $(GOBASE)/vendor:$(GOBASE) GOBIN := $(GOBASE)/bin GOFILES := $(wildcard *.go) # Use linker flags to provide version/build settings LDFLAGS=-ldflags &amp;#34;-X=main.</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/dev/go/coredns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/dev/go/coredns/</guid><description>CoreDNS 开发 # 插件开发 # 参考： https://github.com/coredns/rrl
集成插件 # 将插件放置在 coredns/plugin/ 目录下 将指令添加到 core/dnsserver/zdirectives.go Directives 数组中 增加插件到 plugin.cfg core/plugin/zplugin.go</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/dev/go/pprof/memory_leak/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/dev/go/pprof/memory_leak/</guid><description>go pprof与线上事故：一次成功的定位与失败的复现
Memory Leaking Scenarios # Gin pprof # import &amp;#34;github.com/gin-contrib/pprof&amp;#34; pprof.Register(router) Case Sets # Case1: https://github.com/golang/go/issues/25484
yes, the way used by strings.Builder, is a more efficient way.
func ByteSlice2String(bs []byte) string { return *(*string)(unsafe.Pointer(&amp;amp;bs)) } For reference, this is the source referred to
https://www.openmymind.net/Go-Slices-And-The-Case-Of-The-Missing-Memory/</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/dev/go/serverless-tencent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/dev/go/serverless-tencent/</guid><description> 腾讯云 Serverless # 讨论区： https://github.com/serverless/serverless-tencent/discussions
安装 # npm install -g serverless 环境配置 # serverless 配置文件 .env # tencent serverless config STAGE=test SERVERLESS_PLATFORM_VENDOR=tencent GLOBAL_ACCELERATOR_NA=true TENCENT_APP_ID=xxx TENCENT_SECRET_ID=XXX TENCENT_SECRET_KEY=XXX TENCENT_REGION=ap-shanghai 不过.env 文件管理繁琐， 建议使用 credential 来存储全局 secret, 全局授权身份
# 国际用户，使用如下命令部署 SERVERLESS_PLATFORM_VENDOR=tencent GLOBAL_ACCELERATOR_NA=true sls deploy --stage test serverless.yaml 配置文件 Ref: https://github.com/serverless-components/tencent-scf/blob/master/docs/configure.md.
Demo: [https://github.com/airdb/scf-go]
部署 # SERVERLESS_PLATFORM_VENDOR=tencent GLOBAL_ACCELERATOR_NA=true sls deploy --stage test 查看日志 # SERVERLESS_PLATFORM_VENDOR=tencent GLOBAL_ACCELERATOR_NA=true sls logs --tail --stage test</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/dev/go/tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/dev/go/tools/</guid><description>Golang Command Line tools # Linux pipes in Golang
使用Go语言在MacOS创建一个自定义的命令行工具
你应该定期更新 Homebrew</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/dev/standard/case/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/dev/standard/case/</guid><description>好好写代码 # Bad Cases # Please don&amp;rsquo;t waste maintainers&amp;rsquo; time on your KPI grabbing patches (AKA, don&amp;rsquo;t be a KPI jerk)</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/kube/1-kubernetes-on-macOS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/kube/1-kubernetes-on-macOS/</guid><description>Minikube Installation # Requirements # Minikube requires that VT-x/AMD-v virtualization is enabled in BIOS. To check that this is enabled on OSX / macOS run:
sysctl -a | grep machdep.cpu.features | grep VMX --color=auto If there&amp;rsquo;s output, you&amp;rsquo;re good!
Prerequisites # kubectl docker (for Mac) minikube virtualbox brew update &amp;amp;&amp;amp; brew install kubectl &amp;amp;&amp;amp; brew cask install docker minikube virtualbox Verify # docker --version # Docker version 17.09.0-ce, build afdb6d4 docker-compose --version # docker-compose version 1.</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/kube/2-ingress-exmaple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/kube/2-ingress-exmaple/</guid><description>Kubernetes Ingress with Nginx Example # refer
How to Use Nginx Ingress Controller # Installation Guide # Start by creating the “mandatory” resources for Nginx Ingress in your cluster. kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml
gg
Then, enable the ingress add-on for Minikube. minikube addons enable ingress
Check that it’s all set up correctly. kubectl get pods --all-namespaces | grep ingress-nginx
Create the resources &amp;amp; the Ingress in the cluster # example code</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/kube/5-helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/kube/5-helm/</guid><description> Helm V3 Installation # Requirements # helm repo add stable https://kubernetes-charts.storage.googleapis.com
install Mysql # mysql
helm install mysql --set mysqlRootPassword=secret stable/mysql MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace default mysql -o jsonpath=&amp;#34;{.data.mysql-root-password}&amp;#34; | base64 --decode; echo) kubectl port-forward svc/mysql 3306</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/kube/9-faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/kube/9-faq/</guid><description>Kube &amp;amp; Helm FAQ # Minikube # (How to completely purge minikube config or reset IP back to 192.168.99.100)[https://stackoverflow.com/questions/53871053/how-to-completely-purge-minikube-config-or-reset-ip-back-to-192-168-99-100] ~/Library/VirtualBox/HostInterfaceNetworking-vboxnet0-Dhcpd.leases</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/kube/helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/kube/helm/</guid><description>Airdb Helm
Helm Package Repo. Heml index.yaml
Usage # helm repo add airdb https://www.airdb.com/helm/ helm repo update helm search repo helm/mychart helm install airdb/mychat Helm V3 Env and Search # helm env helm search repo airdb Create or Update Helm Chart Repo # git clone https://github.com/airdb/helm/ cd helm helm repo index ./ --url https://www.airdb.com/helm/ helm package mychart Update the index.yaml file based on your chart. helm repo index --merge index.yaml --url https://www.</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/linux/service/dhcp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/linux/service/dhcp/</guid><description>DHCP # Dynamic Host Configuration Protocol
Reference # tftp server: https://github.com/tftp-go-team/hooktftp
一个网络启动服务器，支持pxe: https://github.com/pojntfx/bofied
Best Practice
dhcp/conf/dhcpd.conf # include &amp;quot;/var/www/html/autoinstall/dhcp/host&amp;quot;; ddns-update-style interim; ignore client-updates; allow unknown-clients; ping-check true; option perform-mask-discovery true; option router-discovery true; #option ntp-servers 10.4.18.10,10.4.18.11; # hz ntp #option time-offset -18000; # Eastern Standard Time. #option domain-name-servers 10.0.1.127,203.196.0.6; option domain-search &amp;quot;airdb.io&amp;quot;; default-lease-time 3600; max-lease-time 4800; group host_pool { default-lease-time 600; max-lease-time 600; allow bootp; allow booting; filename &amp;quot;/pxelinux.0&amp;quot;; option dhcp-renewal-time 10; subnet 10.</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/linux/service/monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/linux/service/monitor/</guid><description>Monitor # Host Monitor # Linux系统内存使用率该怎么计算
psutil module # Go: https://github.com/shirou/gopsutil
Python: https://github.com/giampaolo/psutil</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/linux/service/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/linux/service/nginx/</guid><description>Nginx # 公共配置 # 说明： conf/nginx.conf 中存放在公共配置中， conf.d/upstream.conf 中存放upstream配置， conf.d/host.conf 中存放 location 等其他配置。
# For more information on configuration, see: # * Official English Documentation: http://nginx.org/en/docs/ # * Official Russian Documentation: http://nginx.org/ru/docs/ worker_processes auto; error_log logs/error.log; pid run/nginx.pid; # Load dynamic modules. See /usr/share/nginx/README.dynamic. # include /usr/share/nginx/modules/*.conf; events { worker_connections 2048; } http { include /etc/nginx/mime.types; default_type application/octet-stream; #log_format main &amp;#39;$remote_addr - $host [$time_local] &amp;#34;$request&amp;#34; &amp;#39; &amp;#39;$status $body_bytes_sent &amp;#34;$http_referer&amp;#34; &amp;#39; &amp;#39;&amp;#34;$http_user_agent&amp;#34; &amp;#34;$http_x_forwarded_for&amp;#34;&amp;#39;; log_format main &amp;#39;$time_iso8601|$status|$remote_addr|$host|$server_port|$server_protocol|$request_method|$host$request_uri|$request_filename|$content_type|$bytes_sent|$body_bytes_sent|$request_time|$http_user_agent|$http_Tencent_LeakScan|$upstream_addr|$http_referer&amp;#39;; error_log logs/error.</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/linux/shell/bash-completion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/linux/shell/bash-completion/</guid><description>Bash Command for Developer # Bash Completion # Reference
Bash completion is a bash function that allows you to auto complete commands or arguments by typing partially commands or arguments, then pressing the [Tab] key. This will help you when writing the bash command in terminal.
Installation # $ brew install bash-completion Bash completion will be installed in /usr/local/etc/bash_completion.d. For it to work, add this to your ~/.bash_profile:
$ echo &amp;#34;[ -f /usr/local/etc/bash_completion ] &amp;amp;&amp;amp; .</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/linux/shell/bash-prog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/linux/shell/bash-prog/</guid><description>Bash Programming # 学习地址 # BASH Programming - Introduction HOW-TO
编程规范 # Google Shell Code Style
一些 Debug 技巧 # set -x set -e export PS4=&amp;#39;+${BASH_SOURCE}:${LINENO}:${FUNCNAME[0]}: &amp;#39; echo &amp;#34;Today is $(date %Y-%m-%d)&amp;#34; set +x 说明： PS4 The value of this parameter is expanded as with PS1 and the value is printed before each command bash displays during an execution trace. The first character of PS4 is replicated multiple times, as neces-sary, to indicate multiple levels of indirection.</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/linux/shell/bash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/linux/shell/bash/</guid><description>Bash # Profile 执行顺序 # 登录 Linux 时，首先启动 /etc/profile 文件，然后再启动用户目录下的 ~/.bash_profile、 ~/.bash_login或 ~/.profile文件中的其中一个, 一般还会执行 ~/.bashrc文件。
~/.bash_logout，每次退出系统或退出bash shell时,执行该文件。
❗️注意: 部分系统只读取~/.bashrc (不读取 ~/.bash_prfoile), 如 BusyBox
Bash 环境变量 # # 公共 $LOGNAME: 登录用户名 $HOME: 当前用户家目录 export PS1=&amp;#34;[\u@\H \W]\\$ &amp;#34; export HISTTIMEFORMAT=&amp;#34;%F %T `whoami` &amp;#34; export TMOUT=600 # 600 秒内用户无操作就字段断开终端 常用别名 # alias ipsort=&amp;#34;sort -t&amp;#34;.&amp;#34; -k1,1n -k2,2n -k3,3n -k4,4n&amp;#34; alias ipsortr=&amp;#34;sort -t&amp;#34;.&amp;#34; -k1,1nr -k2,2nr -k3,3nr -k4,4nr&amp;#34; 常用命令 # date +&amp;#34;%s&amp;#34; # uninx timestamp date -d @1548987653 # linux, unix timestamp 转 &amp;#34;Fri Feb 1 10:20:53 CST 2019&amp;#34; sudo date -d 1548987653 # mac, unix timestamp 转 &amp;#34;Fri Feb 1 10:20:53 CST 2019&amp;#34; jq # Command-line JSON processor, Download from https://github.</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/linux/shell/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/linux/shell/ssh/</guid><description>SSH # ssh(Secure Shell) 是典型的 C/S 框架，包含服务端(sshd) 和 客户端(ssh)
客户端 ssh # 管理大规模机群的时候会觉得经常输入yes比较麻烦，尤其是主机重装后，还需要清理 known_hosts 文件，可以进行配置一下，这样用起来更顺手。 配置 $HOME/.ssh/config如下:
StrictHostKeyChecking no UserKnownHostsFile /dev/null ConnectTimeout 3 或
alias ssh=&amp;#34;ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o \ ConnectTimeout=3&amp;#34; 服务端 sshd # 配置文件 /etc/ssh/sshd_config
Banner /etc/ssh/banner_file # 登录主机时显示的一个 banner，可以是欢迎语 PasswordAuthentication no PermitRootLogin yes # 允许root用户远程登录 生成证书 # ssh-keygen -b 2048 -C $HOSTNAME
排障 # 如果目标机器无法 ssh，可以使用 -v 参数排查详情。
::: warning 个别主机，可能会设置 /etc/hosts.allow 或 /etc/hosts.deny。 :::</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/linux/shell/tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/linux/shell/tools/</guid><description> Command for Developer # 收藏一些很好的开发工具。
brew (MacOS) # 查看可以升级的软件 brew outdated
CI (Continuous Integration) # github cli
terraform
docker # sudo docker exec -it -e COLUMNS=$(tput cols) -e LINES=$(tput lines) airdb/go bash tmux: 一个优秀的终端复用软件，类似GNU Screen jq: Command-line JSON processor, https://github.com/stedolan/jq</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/linux/shell/vim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/linux/shell/vim/</guid><description>VIM # vundle 搭建很方便
git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
修改 .vimrc
打开vim在底行模式下输入 BundleInstall
如果还需要其他插件，可以使用 BundleSearch 进行在线查找插件
配置文件内容 # filetype off syntax on set rtp+=~/.vim/bundle/Vundle.vim call vundle#begin() &amp;#34; 加载插件 Plugin &amp;#39;VundleVim/Vundle.vim&amp;#39; Plugin &amp;#39;scrooloose/nerdtree&amp;#39; Plugin &amp;#39;vim-airline/vim-airline&amp;#39; Plugin &amp;#39;fatih/vim-go&amp;#39; Plugin &amp;#39;vim-airline/vim-airline-themes&amp;#39; Plugin &amp;#39;michaelHL/awesome-vim-colorschemes&amp;#39; Plugin &amp;#39;Tagbar&amp;#39; Plugin &amp;#39;Tabular&amp;#39; call vundle#end() filetype plugin indent on &amp;#34; required &amp;#34; 打开自动定位到最后编辑的位置, 需要确认.viminfo当前用户可写 if has(&amp;#34;autocmd&amp;#34;) au BufReadPost * if line(&amp;#34;&amp;#39;\&amp;#34;&amp;#34;) &amp;gt; 1 &amp;amp;&amp;amp; line(&amp;#34;&amp;#39;\&amp;#34;&amp;#34;) &amp;lt;= line(&amp;#34;$&amp;#34;) | exe &amp;#34;normal!</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/osinit/mac-faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/osinit/mac-faq/</guid><description>Mac 常见问题处理 # 修改主机名 # sudo scutil &amp;ndash;set HostName 新的主机名
github remote: Permission to .git denied to user. # 解决方案
这个解决方案其实很简单。首先，我用的是mac电脑，mac电脑有个keychain的应用即钥匙串访问，这里存储了github先前访问的密码，所以每次push的时候都会读取这个本地用户名及密码，所以才被github denied。
解决步骤哦依次如下：打开 应用程序 &amp;mdash;-&amp;gt; 钥匙串访问 &amp;mdash;-&amp;gt;双击，即可进入到钥匙串访问记录保存页面，选择github.com名称的应用，右键删除即可。
修改磁盘名 # diskutil info disk1s1
diskutil rename oldname newname
Mac下解决LC_CTYPE警告的最简单方法 # terminal 去掉set locale environment
SSH连接服务器一段时间不操作之后卡死的问题 # 卡死是因为LIUNX安全设置问题，在一段时间内没有使用数据的情况下会自动断开，解决方法就是让本地或者服务器隔一段时间发送一个请求给对方即可
~/.ssh/config 中增加如下配置即可。 #每隔50秒就向服务器发送一个请求 ServerAliveInterval 50 #允许超时的次数，一般都会响应 ServerAliveCountMax 3</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/osinit/ubuntu-faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/osinit/ubuntu-faq/</guid><description> Ubuntu FAQ # 更新证书链问题 # apt list --installed | grep ca-certificates apt-get update DEBIAN_FRONTEND=noninteractive apt-get install -y --reinstall ca-certificates</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part1/4-ways-to-learn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part1/4-ways-to-learn/</guid><description>四种学习方法 (来源：搜狐, 侵删) # 一、费曼学习法： # 费曼学习法的灵感源于诺贝尔物理奖获得者理查德费曼（Richard Feynman），运用费曼技巧,你只需花上20分钟就能深入理解知识点,而且记忆深刻,难以遗忘。知识有两种类型，我们绝大多数人关注的都是错误的那类。第一类知识注重了解某个事物的名称。第二类知识注重了解某件事物。这可不是一回事儿。著名的诺贝尔物理学家理查德·费曼（Richard Feynman）能够理解这二者间的差别，这也是他成功最重要的原因之一。事实上，他创造了一种学习方法，确保他会比别人对事物了解得更透彻。
运用步骤：
1、获取知识（某概念） ，理解你所要学习的材料的内容。
2、讲解/复述 你所获得的主要内容。
3、用你自己的方式以 潜意识的形式 再次 复述 你所学到的知识。
4、这一步是一个 可循环过程 ：不满意——纠错反馈；满意——尝试运用更简单精炼的语言概括。再用你所学到的知识解决实际问题，加以运用。
5、反思 。 反思你在思考的时候在哪里卡了壳，着重这个地方，再次理解。这个过程至关重要！
6、检验。 通过不断的进行实践检验才能巩固你对于该知识点的理解。
二、思维导图学习法： # 思维导图法又称为心智图法（Mind mapping），是一项流行的全脑式学习方法，它能够将各种点子、想法以及它们之间的关联性以图像视觉的景象呈现。它能够将一些核心概念、事物与另一些概念、事物形象地概念组织起来，输入我们脑内的记忆树图。它允许我们对复杂的概念、信息、数据进行组织加工，以更形象、易懂的形式展现在我们面前。
思维导图法总是从一些中心概念、问题入手。 非常典型的是一些与中心概念线形连接关键字、短语或图像。
我们中的大多数人都是视觉导向的，通过运用结构、关键字、颜色、图像、超链接（以及声音），将外部概念引入我们的思维和生活。简而言之，心智图法就是将中心概念与关联概念连接起来的一种方法。 不同于我们在学校里所学到的直线性思考方法，心智图法通过训练运用全脑思考，来刺激我们的想象力和创造力。因此，它被认为是全面调动分析能力和创造能力的一种思考方法。
思维导图的要点：
1、将主要概念、想法放置于图的中心位置。 最好用图片来表示它。
2、尽量使用大空间，以便稍后你有足够的空间添加其他内容。
3、如果有帮助的话，可以使用不同的颜色和大写字母。 个性化你的心智图。
4、在心智图上寻找、发现关系。
5、为次级主体建立次级中心。
三、西蒙学习法 # 是指诺贝尔经济学奖获得者西蒙教授提出的一个理论：“对于一个有一定基础的人来说，只要真正肯下功夫，在6个月内就可以掌握任何一门学问。”
西蒙教授立论所依据的实验心理的研究成果表明：一个人1分钟到1分半钟可以记忆一个信息，心理学把这样一个信息称为“块”，估记每一门学问所包含的信息量大约是5万块，如果1分钟能记忆1“块”，那么5万块大约需要1000个小时，以每星期学习40小时计算，要掌握一门学问大约需要用6个月。
为了形象地说明，把西蒙学习法比做一把锥子。正如居里夫人所说，“知识的专一性像锥尖，精力的集中好比是锥子的作用力，时间的连续性好比是不停顿地使锥子往前钻进。” 西蒙学习法所支配的学习活动，呈现出一种尖锐猛烈、持续不断的态势。
为了感谢西蒙的这个研究成果，教育心理学界称这种学习法为西蒙学习法，又名 “锥形学习法”。
这种“锥形学习法”的高效原理在于，连续的长时间学习本身包涵对之前学习内容的应用，这样就省去了大量的复习时间。如果用烧水来做比喻，“锥形学习法”是连续的加热，所以热量散失的少；普通的间断学习是烧一会儿就停止加热，一段时间以后再继续加热，这样许多热量就白白散失了。两相比较，自然是持续“加热”效果显著了。
原理：烧一壶开水，如果断断续续地烧，1万个小时也烧不开，如果连续烧，1个小时就够用了。
四、SQ3R学习法 # 这种学习方法是由罗宾逊提出来的并盛行于美国大专院校。据了解，这种方法颇受中国大学生的喜爱，他们觉得这种方法人人都可以试用，都会取得一定的效果。
SQ3R代表：
纵览（Survey）
提问（Question）
阅读（Read）
背诵（Recite）
复习 (Revise）
1、纵览编辑
纵览就是对全书进行快速的浏览，弄清这本书的基本内容，对作者的基本观点有一个初步印象.一般来说，先阅读作者的序言（前言）或后记，了解作者写这本书的意图和目的，继而仔细查阅其目录和索引，如有可能，略读各章的提要或小结，确定全书阅读，或取其某些章节精读。纵览往往可以了解到最新信息，启发自己的思路。
2、提问编辑
大学生在学习过程中，不仅要学会解决问题，而更重要的是学会提出问题。在读书时，要透过书中表面字句去捕捉问题，敢于在无疑处生疑，提出自己的设想。同时，要认真琢磨其中的某些观点，并把它和自己所掌握的有关观点相对比、相联系，进行评论，提出问题。有了问题，就会进一步去探索，从而可能提炼出新观点。
3、阅读编辑
阅读的目的是为了正确理解和深入掌握文章的精髓，对重点章节学深吃透，做到融会贯通，使其成为自己知识结构的牢固基础。读书的最佳境界是“读懂书上没有的东西”。就是要懂得从明看出暗，从静看出动，从是看出非。读书要能看出书本含蓄之处，也就是书本的言外意、弦外音，这要靠读者自己去思考、捕捉和体会。书的东西，是死的,静止化了，而科学知识却日新月异，要能从过去的书本中看到现在，从现在的书本中想到将来，这样就能&amp;quot;激活&amp;quot;死的知识。书本知识是一定时代人们认识水平的记录，因而带有时代的烙印。瑕瑜相杂、正误互见。看出或指出书本中的谬误、漏洞，并非专家、权威莫属，每一位深思的读者都能发现。因此，要养成思考的习惯，边读边想，必有所得。</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part1/efficient-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part1/efficient-communication/</guid><description> 高效沟通 # Efficient communication
老板要善于提问 # 1. 引导 # 用提问的方式，&amp;quot;倒逼&amp;quot; 员工找到答案，从而提高员工的对与感与成就感。 永远不要给员工答案，要让员工给你答案，而且不要只给一个答案，一定要给多个答案。 2. 倾听 # 心态平和，毫无偏见，全面接收和理解对方的信息，而且不是只听自己想听的信息。 3. 共情 # 换位思考, 站在对方的立场设身处地思考和处理问题，晓之以理，动之以情。 (避免指责对方) 4. 高维 # 提升自己的格局观，能从全局利益、长远利益思考问题，解决问题。( 不纠结某一个细节) 5. 反馈 # 建立反馈机制，及时发现问题、解决问题、形成正向循环。 1-2-3 反馈机制（指定时间内处理不了问题，及时向上反馈） 好好说话的艺术 # 跟员工沟通 # 一对一会议 # 工作状态 个人发展 公司组织 员工对自己的看法 每半月一次 时间（30-60分钟） 绩效沟通 # 沟通一定要放在平时， 不要搞成像秋后算账一样！ 因为你是管理者， 不是地方监工 但要注意的是，反馈的过程中， 不是我在指责员工，而是我的帮助员工，一定要有帮扶的态度，这样员工会更容易接受。
特立独行的员工 # 当在一个人身上花的精力和时间成本，大于你到外面找一个更好的人或者能力相当的人来替代他的时候，你就要坚决地把他替换掉。
挽留离职员工 # 实在挽留不成的时候，也要注意经营好这份情意。 劝退员工 # 任何人都应该有可以纠正错误的机会，公司应该给员工这样的机会，员工也应该给公司同样的机会。 跟客户沟通 # 吸引客户的兴趣、帮客户发现问题和管理客户的期望。 跟老板沟通 # 了解你的的老板，赢得老板的信任，管理老板的期望，非暴力&amp;quot;怼&amp;quot; 老板。</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part1/m1-ability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part1/m1-ability/</guid><description>快速提升一线管理者的战斗力 # 1. 认知升级 # 如何学习优秀管理者的底层思维模型？ 何为优秀的管理者？ 何为优秀的 Leader? 如何做到阴阳同体，Leader 的二维修炼？ 领导力如何快速修炼？
目标：认知升级, 构建优秀管理者的思维模型
2. 建团队 # 优秀员工的画像是什么样的？ 如何制作出优秀员工的画像？ 如何利用优秀员工画像选对人、培养人、淘汰人？ 如何提升团队的凝聚力？
目标：掌握建团队的关键能力
3. 定目标 # 如何正确理解团队目标？ 如何正确分解目标？ 如何统一团队目标和员工个人目标？ 如何运用PDCA达成团队目标？
目标：掌握定目标的关键能力
4. 追过程 # 追过程中常用的有效沟通如何做？ 如何和不同沟通风格的人沟通？ 目标达成不理想，如何有效沟通？ 追过程中常用的有效辅导如何做？ 不同类型员工的有效辅导方法？
目标：掌握追过程的关键能力
5. 拿结果 # 好过程和好结果的哪个更重要？ 如何通过Review帮助员工和团队获得成长？ 如何通过Review形成可持续拿结果的方法？
目标：总结出可持续拿结果的方法</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part1/README/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part1/README/</guid><description>公共部分 # 公共部分内容</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/cicd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/cicd/</guid><description>Code Wiki # Code Part # dev</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/gateway/</guid><description>Gateway # 《深入理解BFE》
智能网关趋势 # HTTPS
Quic
GTC (Global Traffic Control 全局流量控制） # 工作原理 分布式监控 调度计算 下发执行
场景 网络出口故障 网络出口拥塞，被攻击 网络接入系统故障 区域性联通故障
GSLB (Global Server Load Balancing 全局服务器负载平衡) # 目的 降低对DNS 调度的依赖 加快止损速度
场景 内部服务故障 服务发布 内部服务压力不均 业务突增</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/kube/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/kube/</guid><description>Code Wiki # Code Part # dev</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/linux/</guid><description>Linux Wiki # Basic # Linux</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/ops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/ops/</guid><description>运维 # 接入 # 四层接入
七层接入
CDN
IP 库
Nginx
服务集群 # 发布
容器
调度
容灾
数据一致性
容灾
多活
预案演练
CI/CD # 持续集成
持续部署
数据库 # 同步
数据恢复
缓存 # 中间件 # Kafka
消息中间件 MQ
数据安全及运维安全 # WAF
大数据及分布式计算 # Hadoop
Ceph
Hive
人工智能 # 语音识别 ASR
人脸识别
自然语言处理 NLP</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/osinit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/osinit/</guid><description>OS Init # 主机容器初始化 # [osinit]https://init.airdb.host/
osinit Repo
软件包管理 # Ubunut PPA ( https://launchpad.net/~airdb)
sudo apt-add-repository ppa:airdb/adb</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/README/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/README/</guid><description>Application 性能优化 # Linux 底层优化 # CPU￼ # 进程和 CPU 原理
进程、线程与协程 CPU 调度 中断系统 CPU 缓存 NUMA 性能指标
平均复杂 CPU 使用率：用户 CPU, 系统CPU，iowait, 软中断，硬中断，窃取 CPU，客户 CPU. 上下文切换：自愿切换，非自愿切换 CPU 缓存命中率 性能剖析
top/htop/ps vmstat mpstat pidstat strace perf execsnoop proc 文件系统 调优方法
CPU 绑定 affinity 进程 CPU 资源限制 进程优先级调整 中断负载均衡 CPU 缓存 NUMA 优化 内存 # 内存原理
地址空间 虚拟内存 内存分配与回收 缓存与缓冲区 swap 性能指标
系统内存使用 进程内存使用 缓存与缓冲区命中率 性能剖析
free top sar vmstat cachestat cachetop memleak proc 文件系统 调优方法</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/snapcraft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/snapcraft/</guid><description>Ubuntu Snapcraft # snapcraft push --release edge *.snap Pushing airdb_1.0_amd64.snap After pushing, an attempt will be made to release to &amp;#39;edge&amp;#39; Preparing to push &amp;#39;/home/ubuntu/airdb/airdb_1.0_amd64.snap&amp;#39; to the store. Pushing airdb_1.0_amd64.snap [===================================================================================================================] 100% Processing...| Ready to release! Revision 1 of &amp;#39;airdb&amp;#39; created. Track Arch Channel Version Revision latest amd64 stable - - candidate - - beta - - edge 1.0 1 The &amp;#39;edge&amp;#39; channel is now open. snap/snapcraft.yaml name: airdb version: &amp;#39;1.</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/sre/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/sre/</guid><description>SRE 介绍 # Site Reliability Engineering
一、SRE起源和发展 # IT领域一直有很多趋势和流行关键词，比如微服务和DevOps，现在国内又兴起了SRE，它在传统运维之外又纳入更多的开发和流程部分。SRE是Site Reliability Engineer的简称，由谷歌公司首先提出，一开始是公司内部定义的一个工种。谷歌的SRE工程师对Borg分布式集群管理系统以及在此之上运行的Gmail、Google Docs、Web Search等以及各种APP应用进行运维。
这个岗位的工程师具有开发能力，又了解一些系统管理的知识，他们把一些最佳实践、方式、流程、方法都固化成代码，用这种方式去应对规模性的扩张，去应对复杂度的上升。从名字其实就可以看出SRE不只是做Operation方面的工作，更多是保障整个服务的稳定性。
SRE不仅仅是对分布式系统运维工程师的职业要求，还涉及运维的自动化、开发运维一体化、持续集成持续开发等理念、监控系统、部署、容量规划、可靠性技术和实践和运维团队建设等方面的内容。可为云服务提供商提高分布式系统的资源利用率，降低运营和运维成本，让系统可靠和稳定地运行，提升用户体验。
随着互联网的快速发展，分布式系统规模急剧扩展，新型系统的运维要求对传统运维理念提出了新的挑战。随着谷歌对大规模分布式集群和互联网应用运维经验的积累，SRE的实践理念得到国外各大互联网公司的采纳和应用。Site Reliability Engineer逐渐朝着Site Reliability Engineering的理论化方向发展。
由于互联网行业的特性和对速度的追求，一般这些新理念和新技术的发端和普及都是从互联网企业开始，国内也不例外。虽然很多国内互联网企业并没有明确提及SRE这个岗位名称，但是据我所知他们也是在向着SRE理念提及的很多方向在前进，比如自动化、工具化、平台化等等。不管国内称之为PE、运维工程师还是其他什么，其实做的事情也就是SRE在倡导的DevOps的运维实践
二、定位、方向与职责 # 总结一下，SRE
从岗位的角度上看：运维工程师升级版 从运维的方式上看：自动化、智能化、工具化、平台化 从工作的结果上看：保证系统稳定的前提下提高系统效率，平衡系统稳定性和用户体验的关系
三、实践 # 从SRE成功实践的几大要素看：
1、具有研发能力 2、一定要设定服务的SLA 3、有余量的预估 4、 SRE与研发有共享的资源工具 5、 SRE承担不超过50%的运维工作量 6、 每个事故都要做事后分析，并要聚焦于流程和技术。 LINUX云计算SRE工程师课程体系 # 入门 # 模块1、 Linux新手快速基础入门 模块2、 面试必备-企业级Shell脚本编程实战 模块3、 Linux系统结构、内核、进程管理高级进阶 模块4、网络管理及互联网通信机制实战 模块5、互联网常见服务应用实战 模块6、网络安全、加密协议及安全通信服务实战 模块7、安全加固-Linux内核级防火墙lptables 模块8、企业级Web服务与LA/NMP架构 模块9、 实战百万并发架构核心-Nginx服务及高级进阶实战 模块10、中间件Tomcat服务集群部署与JVM优化实战 模块11、亿级PV站点架构LVS负载均衡群解决方案 模块12、DBA必备-Mysql数据库入门到集群架构实战全解 模块13、Ansible快速安装部署与运维自动化实战 模块14、网络安全VPN及JumpServer堡垒跳板机实战 模块15、监控神器-Zabbix运维监控实战部署
进阶 # 模块16、4-7层负载均衡Haproxy生产环境应用实战 模块17、Keepalived高可用集群实战进阶 模块18、Nosql存储Redis、Mongodb入门到精通 模块19、指标采集、监控系统Prometheus实战 模块20、注册中心Zookeeper集群与部署 模块21、消息队列kafka生产环境应用方案 模块22、ELK企业级海量日志系统实战进阶 模块24、Docker容器虚拟化实战进阶 模块23、Gitlab及Jenkins实现C/CD可持续化集成实战 模块25、主机虚拟化技术与KVM应用实战 模块26、阿里云计算平台应用实战 模块27、微服务dubbo分布式框架应用 模块28、系统稳定性建设(SRE) 模块29、Kubernetes专家级生产环境实战应用 模块30、自动化与DevOps实践</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part4/defensive-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part4/defensive-programming/</guid><description>Defensive Programming # Reference # http://teaching.csse.uwa.edu.au/units/CITS1001/handouts/L14-defensive-programming.pdf
Rules on how to employ Defensive Programming in your codebase: # Protect your code from invalid data coming from outside, wherever you decide outside is. External systems, files, or any call from outside of the module/component. Establish “trust boundaries” — everything outside of the boundary is dangerous, everything inside of the boundary is safe. In the barricade code, validate all input data.
After you have checked for bad data, decide how to handle it.</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part4/exec_base64/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part4/exec_base64/</guid><description>Base64 入侵
PyPI 官方仓库遭遇request恶意包投毒
[dean.airdb.local test]$ echo -e &amp;ldquo;import os; os.system(&amp;quot;ls&amp;quot;)&amp;rdquo; | base64 aW1wb3J0IG9zOyBvcy5zeXN0ZW0oImxzIikK
[dean.airdb.local test]$ python -c &amp;ldquo;import base64; exec(base64.b64decode(&amp;lsquo;aW1wb3J0IG9zOyBvcy5zeXN0ZW0oImxzIikK&amp;rsquo;))&amp;rdquo; test test.log
[dean.airdb.local test]$ echo -e aW1wb3J0IG9zOyBvcy5zeXN0ZW0oImxzIikK | base64 -d import os; os.system(&amp;ldquo;ls&amp;rdquo;)</description></item><item><title>Chrome 插件制作</title><link>https://airdb.wiki/deancn/wiki/dev/vuejs/vue-chrome-extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/dev/vuejs/vue-chrome-extension/</guid><description># 创建项目 # vue create --preset kocal/vue-web-extension my-extension cd my-extension npm run serve 载入 # chrome 浏览器输入 chrome://extensions, 加载插件选择 my-extension/dist 目录。 加载成功即可生效。
参考 # https://developer.chrome.com/docs/extensions/reference/commands/</description></item><item><title>DevSecOps</title><link>https://airdb.wiki/deancn/wiki/dev/standard/sec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/dev/standard/sec/</guid><description>面向开发人员梳理的代码安全指南 # Tencent: https://github.com/tencent/secguide
原文: https://mp.weixin.qq.com/s/yzg5uVnoJDTyaH2Wn8Vo7w
设计理念 # 代码安全指南的内容呈树状结构展开，共分5层，如下：</description></item><item><title>Raspberry 树莓派</title><link>https://airdb.wiki/deancn/wiki/iot/raspberry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/iot/raspberry/</guid><description> 树莓派系统烧录 # https://stepneverstop.github.io/burn-system2raspberry-in-macos.html
系统配置 # 重新插拔usb
cd /Volumes/boot # 进入根系统 配置网络 # wpa_supplicant.conf
`` country=CN ctrl_interface=DIR=/var/run/wpa_supplicant Group=netdev update_config=1
network={ ssid=&amp;ldquo;Wifi1的名字&amp;rdquo; psk=&amp;ldquo;密码&amp;rdquo; priority=优先级，越大越优先 }
network={ ssid=&amp;ldquo;Wifi2的名字&amp;rdquo; psk=&amp;ldquo;密码&amp;rdquo; priority=优先级 }
### 开启 sshd 服务 touch ssh
### 显示器无输出 解决树莓派4B外接显示屏没反应, 追加如下内容到 config.txt 目录 hdmi_force_hotplug=1 config_hdmi_boost=4 hdmi_group=2 hdmi_mode=9 hdmi_drive=2 hdmi_ignore_edid=0xa5000080 disable_overscan=1
### homebrige https://github.com/oznu/docker-homebridge/wiki/Homebridge-on-Raspberry-Pi ## Bluetooth 树莓派（Raspberry Pi 4）开启和连接蓝牙 https://blog.csdn.net/Cool2050/article/details/105615831</description></item><item><title>内卷问题</title><link>https://airdb.wiki/deancn/wiki/emotion/l1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/emotion/l1/</guid><description>分类 # 工作内卷 婚姻内卷 人物分析 # p1 - 王开心
优点： 沟通能力 1. 讲故事引入 2. 完整的表达心路历程，经理 3. 聆听 4. 愿意改变，努力方向
在学习了解 &amp;ldquo;从虚无到虚无&amp;rdquo; 我的理解： 对生命，对哲学佛学，奉献的思考，必然是生命的终点， 但是什么时候适合自己， 而不是一开始就适合。 我的建议： 要有自己的方向和目标，而不是别人的。
内卷建议： 1. 弹簧，度 自趋力 2. 材质，出生不同， 处境 3. 使劲， 柯达死于数码相机死于智能手机，具备降维打击的能力 4. 长期主义者， 适当躺平，放弃
老师建议： 1. 以终为始 2. 没有别人，只有自己。 对方优点， 自发的改变 3. 主动解决问题的人，才是有能力的人
男人和女人的两个特点(年龄不相关) # 男人： 帝王性, 小孩性 女人： 母爱性, 公主性 如何营造家庭氛围？ 1. 仪式感， 纪念日 早拥吻， 晚卧谈， 心灵沟通 2. 肯定对方的价值，表达温暖 3. 想要得到是什么
汇总 # 家庭关系tips: 爱妻如存银行，爱越存越富裕！</description></item><item><title>如何识别代理</title><link>https://airdb.wiki/deancn/wiki/part4/ids/indentify-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part4/ids/indentify-proxy/</guid><description>代理ip常见的一些功能 # 1.突破自身ip访问限制，现在有许多的网站都对ip地址访问进行了限制，这时则可以通过代理ip来突破限制，让自己进入网站。
2.提高访问速度，通常代理ip服务器都设置一个较大的硬盘缓冲区，当有外信息市，则直接由缓冲区中取出信息，传给用户，以提高访问速度。
3.隐藏真实ip达到匿名效果，可以通过代理ip上网，隐藏真实的ip地址，避免受到黑客攻击。
4.突破ip封锁，例如要抓取一个网站的数据，但是网站对每个ip所能抓取的数据做了限制，这时我们使用代理ip，不停地切换ip，就可以突破限制，从而提高工作效率。
代理的级别 # 根据代理匿名程度的不同，可以划分为透明代理、普通匿名代理、欺骗匿名代理和高匿代理。 如何识别代理 # 一、反向探测技术 扫描IP是不是开通了80，8080, 443等代理服务器经常开通的端口，显然一个普通的用户IP不太可能开通如上的端口。
二、HTTP头部的X_Forwarded_For
开通了HTTP代理的IP可以通过此法来识别是不是代理IP；如果带有XFF信息，该IP是代理IP无疑。
三、Keep-alive报文 如果带有Proxy-Connection的Keep-alive报文，该IP毫无疑问是代理IP。
四、查看IP上端口 如果一个IP有的端口大于10000，那么该IP大多也存在问题，普通的家庭IP开这么大的端口几乎是不可能的。
这四种代理IP检测的方法几乎都是公开的，一些大公司为了避免恶意IP还会采取其他方法。比如利用网络爬虫爬取代理IP并作以标记，更有甚者，会通过业务建模收集恶意IP，然后再通过协议扫描的方式来判断这些IP是不是代理IP。
如何确定使用的代理是否为高匿名代理 # 验证接口：http://httpbin.org/get
验证方法：设置好代理，请求此接口（只需要带一个UA即可），解析响应的json文件，获取匿名程度。
a.如果origin中包含自己真实的IP，则为透明代理；
b.如果响应中包含Proxy-Connection参数，则为匿名代理；
c.其他情况则为高匿代理；
怎样快速判断代理ip是否可用 # telnet
Reference # https://www.wanbianip.com/News-newsInfo-id-213.html https://www.dailiproxy.com/how-to-detect-if-an-ip-address-is-a-proxy/</description></item><item><title>工作方法或原则</title><link>https://airdb.wiki/deancn/wiki/part1/okr/method/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part1/okr/method/</guid><description> SMART 原则 # 指标必须是具体的（Specific） 指标必须是可以衡量的（Measurable） 指标必须是可以达到的（Attainable） 指标是要与其他目标具有一定的相关性(Relevant) 指标必须具有明确的截止期限（Time-bound） 字母 典型对应 更多对应 S Specific（明确） Significant（重要）, Stretching（延伸）, Simple（简易） M Measurable（可衡量） Meaningful（有意义）, Motivational（激励）, Manageable（可管理） A Achievable（可达成） Appropriate（适宜）, Attainable（可达成）, Agreed（同意）, Assignable（可分配）,Actionable（可行动）,Action-oriented（行动导向）, Ambitious（雄心） R Relevant（相关） Realistic（实际）, Results/Results-focused/Results-oriented, Resourced（资源）, Rewarding（奖励） T Time-bound （时限） Time-oriented（时间定向）, Time framed（时限）, Timed（时限）,
Time-based（基于时间）, Timeboxed（时限）, Timely（及时）, Time-Specific（明确时间）, Timetabled（表定时间）, Time limited（时限）, Trackable（可跟踪）, Tangible（明白） SWOT 分析法 #</description></item><item><title>抓包</title><link>https://airdb.wiki/deancn/wiki/linux/shell/tcpdump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/linux/shell/tcpdump/</guid><description>抓取 udp dns 包 # sudo timeout 60 tcpdump -i any -n port 53 sudo tcpdump -i any -nn udp and port 53 sudo tcpdump -i bond0.1000 -nnAAAA | grep -A 20 -B 3 airdb.io 抓取 Client Hello 包 # sudo tcpdump &amp;ldquo;tcp port 443 and (tcp[((tcp[12] &amp;amp; 0xf0) &amp;raquo;2)] = 0x16) &amp;amp;&amp;amp; (tcp[((tcp[12] &amp;amp; 0xf0) &amp;raquo;2)+5] = 0x01)&amp;rdquo; -w client-hello.pcap</description></item><item><title>时间管理</title><link>https://airdb.wiki/deancn/wiki/part1/time-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part1/time-management/</guid><description> 时间管理 # 如何一天完成4个人的工作量?
07:00 - 09:00 是大脑的黄金时间, 可以用来写文章，看书，学外语。 09:00 - 12:00 适合罐头工作法, 找一个安静无打扰的空间, 保持高度的专注。 13:00 - 16:00 是人在一天当中最困的时候，可以适当小睡, 也可以通过变化工作场所来恢复。 16:00 - 18:00 人会升起一种紧迫感, 想着一天不能就这样结束了，进入高效工作。 18:00 - 19:00 适合通过运动来让大脑重启。 19:00 - 21:00 是大脑的第二个黄金时间, 适合再做一些自我投资。 21:00 以后为了不失眠，还是尽早放松吧。</description></item><item><title>爬虫</title><link>https://airdb.wiki/deancn/wiki/part4/crawler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part4/crawler/</guid><description>https://docs.crawlab.cn/zh/Spider/ConfigurableSpider.html
https://github.com/gocolly/colly https://github.com/crawlab-team/crawlab</description></item><item><title>环境设置</title><link>https://airdb.wiki/deancn/wiki/training/1-setup-os-and-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/training/1-setup-os-and-environment/</guid><description> Mac # brew Windows # ubuntu shell and network Common # github.com vscode golang hugo (for recording documents)</description></item><item><title>网络</title><link>https://airdb.wiki/deancn/wiki/linux/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/linux/network/</guid><description>姜知笔记: https://www.gingerdoc.com/</description></item></channel></rss>