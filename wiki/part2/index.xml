<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo Book</title><link>https://airdb.wiki/deancn/wiki/part2/</link><description>Recent content on Hugo Book</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://airdb.wiki/deancn/wiki/part2/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://airdb.wiki/deancn/wiki/part2/cicd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/cicd/</guid><description>Code Wiki # Code Part # dev</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/gateway/</guid><description>Gateway # 《深入理解BFE》
智能网关趋势 # HTTPS
Quic
GTC (Global Traffic Control 全局流量控制） # 工作原理 分布式监控 调度计算 下发执行
场景 网络出口故障 网络出口拥塞，被攻击 网络接入系统故障 区域性联通故障
GSLB (Global Server Load Balancing 全局服务器负载平衡) # 目的 降低对DNS 调度的依赖 加快止损速度
场景 内部服务故障 服务发布 内部服务压力不均 业务突增</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/kube/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/kube/</guid><description>Code Wiki # Code Part # dev</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/linux/</guid><description>Linux Wiki # Basic # Linux</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/ops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/ops/</guid><description>运维 # 接入 # 四层接入
七层接入
CDN
IP 库
Nginx
服务集群 # 发布
容器
调度
容灾
数据一致性
容灾
多活
预案演练
CI/CD # 持续集成
持续部署
数据库 # 同步
数据恢复
缓存 # 中间件 # Kafka
消息中间件 MQ
数据安全及运维安全 # WAF
大数据及分布式计算 # Hadoop
Ceph
Hive
人工智能 # 语音识别 ASR
人脸识别
自然语言处理 NLP</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/osinit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/osinit/</guid><description>OS Init # 主机容器初始化 # [osinit]https://init.airdb.host/
osinit Repo
软件包管理 # Ubunut PPA ( https://launchpad.net/~airdb)
sudo apt-add-repository ppa:airdb/adb</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/README/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/README/</guid><description>Application 性能优化 # Linux 底层优化 # CPU￼ # 进程和 CPU 原理
进程、线程与协程 CPU 调度 中断系统 CPU 缓存 NUMA 性能指标
平均复杂 CPU 使用率：用户 CPU, 系统CPU，iowait, 软中断，硬中断，窃取 CPU，客户 CPU. 上下文切换：自愿切换，非自愿切换 CPU 缓存命中率 性能剖析
top/htop/ps vmstat mpstat pidstat strace perf execsnoop proc 文件系统 调优方法
CPU 绑定 affinity 进程 CPU 资源限制 进程优先级调整 中断负载均衡 CPU 缓存 NUMA 优化 内存 # 内存原理
地址空间 虚拟内存 内存分配与回收 缓存与缓冲区 swap 性能指标
系统内存使用 进程内存使用 缓存与缓冲区命中率 性能剖析
free top sar vmstat cachestat cachetop memleak proc 文件系统 调优方法</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/snapcraft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/snapcraft/</guid><description>Ubuntu Snapcraft # snapcraft push --release edge *.snap Pushing airdb_1.0_amd64.snap After pushing, an attempt will be made to release to &amp;#39;edge&amp;#39; Preparing to push &amp;#39;/home/ubuntu/airdb/airdb_1.0_amd64.snap&amp;#39; to the store. Pushing airdb_1.0_amd64.snap [===================================================================================================================] 100% Processing...| Ready to release! Revision 1 of &amp;#39;airdb&amp;#39; created. Track Arch Channel Version Revision latest amd64 stable - - candidate - - beta - - edge 1.0 1 The &amp;#39;edge&amp;#39; channel is now open. snap/snapcraft.yaml name: airdb version: &amp;#39;1.</description></item><item><title/><link>https://airdb.wiki/deancn/wiki/part2/sre/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/deancn/wiki/part2/sre/</guid><description>SRE 介绍 # Site Reliability Engineering
一、SRE起源和发展 # IT领域一直有很多趋势和流行关键词，比如微服务和DevOps，现在国内又兴起了SRE，它在传统运维之外又纳入更多的开发和流程部分。SRE是Site Reliability Engineer的简称，由谷歌公司首先提出，一开始是公司内部定义的一个工种。谷歌的SRE工程师对Borg分布式集群管理系统以及在此之上运行的Gmail、Google Docs、Web Search等以及各种APP应用进行运维。
这个岗位的工程师具有开发能力，又了解一些系统管理的知识，他们把一些最佳实践、方式、流程、方法都固化成代码，用这种方式去应对规模性的扩张，去应对复杂度的上升。从名字其实就可以看出SRE不只是做Operation方面的工作，更多是保障整个服务的稳定性。
SRE不仅仅是对分布式系统运维工程师的职业要求，还涉及运维的自动化、开发运维一体化、持续集成持续开发等理念、监控系统、部署、容量规划、可靠性技术和实践和运维团队建设等方面的内容。可为云服务提供商提高分布式系统的资源利用率，降低运营和运维成本，让系统可靠和稳定地运行，提升用户体验。
随着互联网的快速发展，分布式系统规模急剧扩展，新型系统的运维要求对传统运维理念提出了新的挑战。随着谷歌对大规模分布式集群和互联网应用运维经验的积累，SRE的实践理念得到国外各大互联网公司的采纳和应用。Site Reliability Engineer逐渐朝着Site Reliability Engineering的理论化方向发展。
由于互联网行业的特性和对速度的追求，一般这些新理念和新技术的发端和普及都是从互联网企业开始，国内也不例外。虽然很多国内互联网企业并没有明确提及SRE这个岗位名称，但是据我所知他们也是在向着SRE理念提及的很多方向在前进，比如自动化、工具化、平台化等等。不管国内称之为PE、运维工程师还是其他什么，其实做的事情也就是SRE在倡导的DevOps的运维实践
二、定位、方向与职责 # 总结一下，SRE
从岗位的角度上看：运维工程师升级版 从运维的方式上看：自动化、智能化、工具化、平台化 从工作的结果上看：保证系统稳定的前提下提高系统效率，平衡系统稳定性和用户体验的关系
三、实践 # 从SRE成功实践的几大要素看：
1、具有研发能力 2、一定要设定服务的SLA 3、有余量的预估 4、 SRE与研发有共享的资源工具 5、 SRE承担不超过50%的运维工作量 6、 每个事故都要做事后分析，并要聚焦于流程和技术。 LINUX云计算SRE工程师课程体系 # 入门 # 模块1、 Linux新手快速基础入门 模块2、 面试必备-企业级Shell脚本编程实战 模块3、 Linux系统结构、内核、进程管理高级进阶 模块4、网络管理及互联网通信机制实战 模块5、互联网常见服务应用实战 模块6、网络安全、加密协议及安全通信服务实战 模块7、安全加固-Linux内核级防火墙lptables 模块8、企业级Web服务与LA/NMP架构 模块9、 实战百万并发架构核心-Nginx服务及高级进阶实战 模块10、中间件Tomcat服务集群部署与JVM优化实战 模块11、亿级PV站点架构LVS负载均衡群解决方案 模块12、DBA必备-Mysql数据库入门到集群架构实战全解 模块13、Ansible快速安装部署与运维自动化实战 模块14、网络安全VPN及JumpServer堡垒跳板机实战 模块15、监控神器-Zabbix运维监控实战部署
进阶 # 模块16、4-7层负载均衡Haproxy生产环境应用实战 模块17、Keepalived高可用集群实战进阶 模块18、Nosql存储Redis、Mongodb入门到精通 模块19、指标采集、监控系统Prometheus实战 模块20、注册中心Zookeeper集群与部署 模块21、消息队列kafka生产环境应用方案 模块22、ELK企业级海量日志系统实战进阶 模块24、Docker容器虚拟化实战进阶 模块23、Gitlab及Jenkins实现C/CD可持续化集成实战 模块25、主机虚拟化技术与KVM应用实战 模块26、阿里云计算平台应用实战 模块27、微服务dubbo分布式框架应用 模块28、系统稳定性建设(SRE) 模块29、Kubernetes专家级生产环境实战应用 模块30、自动化与DevOps实践</description></item></channel></rss>