<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo Book</title><link>https://airdb.wiki/wiki/dev/coding-style/</link><description>Recent content on Hugo Book</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://airdb.wiki/wiki/dev/coding-style/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://airdb.wiki/wiki/dev/coding-style/document/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/wiki/dev/coding-style/document/</guid><description>中文文案排版指北 # 统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。
目录 # 空格 中英文之间需要增加空格 中文与数字之间需要增加空格 数字与单位之间需要增加空格 全角标点与其他字符之间不加空格 -ms-text-autospace to the rescue? 标点符号 不重复使用标点符号 全角和半角 使用全角中文标点 数字使用半角字符 遇到完整的英文整句、特殊名词，其內容使用半角标点 名词 专有名词使用正确的大小写 不要使用不地道的缩写 争议 链接之间增加空格 简体中文使用直角引号 工具 谁在这样做？ 参考文献 空格 # 「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。
与大家共勉之。」—— vinta/paranoid-auto-spacing
中英文之间需要增加空格 # 正确：
在 LeanCloud 上，数据存储是围绕 AVObject 进行的。
错误：
在LeanCloud上，数据存储是围绕AVObject进行的。
在 LeanCloud上，数据存储是围绕AVObject 进行的。
完整的正确用法：
在 LeanCloud 上，数据存储是围绕 AVObject 进行的。每个 AVObject 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 AVObject 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。
例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。
中文与数字之间需要增加空格 # 正确：</description></item><item><title/><link>https://airdb.wiki/wiki/dev/coding-style/go-coding-style/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://airdb.wiki/wiki/dev/coding-style/go-coding-style/</guid><description>Golang 编码规范指南 # 关于代码规范，每个公司、甚至每个团队都有不同的规范，并且有不同的理解。
这份编码规范是参考别的规范，结合自己的实际情况而修订的，并尝试着让身边的朋友也遵守这个。 核心的目的还是为了便于广阅读，减少可避免的 bug 和安全隐患。
如果你的代码没有办法找到下面的规范，那么就遵循标准库的规范，多阅读标准库的源码，标准库的代码可以说是写代码参考的标杆。
行长约定 # 一行最长不超过 80 个字符，超过的请使用换行展示，尽量保持格式优雅。 如果使用 vim，请确认 ~/.vimrc 中设置有 set textwidth=80
网络在线, 频次随机(由讲师时间决定)
package 名字 # 保持 package 的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，尽量和标准库不要冲突。
import 规范 # import 在多行的情况下，goimports 会自动帮你格式化，但是我们这里还是规范一下import的一些规范，如果你在一个文件里面引入了一个package，还是建议采用如下格式：
import ( &amp;quot;fmt&amp;quot; ) 如果你的包引入了三种类型的包，标准库包，程序内部包，第三方包，建议采用如下方式进行组织你的包：
import ( &amp;quot;encoding/json&amp;quot; &amp;quot;strings&amp;quot; &amp;quot;github.com/astaxie/beego&amp;quot; &amp;quot;github.com/go-sql-driver/mysql&amp;quot; &amp;quot;myproject/models&amp;quot; &amp;quot;myproject/controller&amp;quot; &amp;quot;myproject/utils&amp;quot; ) 有顺序的引入包，不同的类型采用空格分离，第一种实标准库，第二是第三方包, 第三是项目包。
在项目中不要使用相对路径引入包：
import &amp;quot;../net&amp;quot; // 这是不好的导入 import &amp;quot;github.com/name/repo/net&amp;quot; // 这是正确的做法 变量申明 # 变量名采用驼峰标准，不要使用 _ 来命名变量名，多个变量申明放在一起
在函数外部申明必须使用 var,不要采用 :=，容易踩到变量的作用域的问题。
自定义类型的string循环问题 # 如果自定义的类型定义了 String 方法，那么在打印的时候会产生隐藏的一些 bug</description></item></channel></rss>